<missions>
  <mission>
    <id>1</id>
    <name>Kompilacja</name>
    <description>Witamy w Centrum Programowania Robotów. Aby wydać polecenie robotowi, należy kliknąć na niego lewym przyciskiem myszki, a następnie wprowadzić kod. Początkowy kod składa się z kilku elementów:
    
&lt;b&gt;&lt;color=#800000ff&gt;using RobotsLibrary;

class Program : Robot
{
  void Main()
  {

  }
}&lt;/color&gt;&lt;/b&gt;

&lt;b&gt;using RobotLibrary&lt;/b&gt; - pozwala na używanie podstawowych funkcji robota
&lt;b&gt;class Program : Robot&lt;/b&gt; - miejsce, gdzie koncentruje się cały kod
&lt;b&gt;void Main()&lt;/b&gt; - w tym miejscu rozpoczynamy wykonywanie kodu
      
Nie martw się drogi kadecie, jeżeli czujesz się zakłopotany. Z czasem poznasz dokładniej całą strukturę kodu. Twoim pierwszym zadaniem jest po prostu skompilowanie pustego szablonu kodu. Otwórz edytor kodu i wciśnij przycisk &lt;b&gt;Kompiluj&lt;/b&gt;. Nie oczekuj, że coś się zdarzy. Jest to tylko pusty szablon.</description>
  </mission>
  <mission>
    <id>2</id>
    <name>Funkcje</name>
    <description>Polecenia robotowi wydajesz za pomocą funkcji. Używa się ich podając nazwę funkcji, a na następnie pisząc dwa nawiasy "()". Po każdej operacji musi pojawić się w zapisie średnik ';'. Jedną z najprostszych funkcji jest ta odpowiedzialna za włączanie oświetlenia robota. Aby jej użyć wprowadź fragment kodu "Light()" między klamrami "{" i "}" po wyrażeniu "Main()", tak jak pokazano w następującym przykładzie.

&lt;b&gt;&lt;color=#800000ff&gt;using RobotsLibrary;

class Program : Robot
{
  void Main()
  {
    Light();
  }
}&lt;/color&gt;&lt;/b&gt;

Po wprowadzeniu kodu wciśnij przycisk kompiluj. Robot powinien włączyć swoje światła.</description>
  </mission>
  <mission>
    <id>3</id>
    <name>Jazda do przodu</name>
    <description>Niektóre funkcje pobierają jeden lub więcej argumentów, które podaje się wewnątrz nawiasów po nazwie funkcji. Użyj funkcji &lt;b&gt;Move(odległość)&lt;/b&gt;, aby poruszyć robotem do przodu o podaną ilość metrów. Na przykład następujący kod
    
&lt;b&gt;&lt;color=#800000ff&gt;using RobotsLibrary;

class Program : Robot
{
  void Main()
  {
    Move(5);
  }
}&lt;/color&gt;&lt;/b&gt;

sprawi, że robot przemieści się 5 metrów do przodu. Twoim zadaniem jest przemieszcze robota do zaznaczonego pola, które znajduje się 10 metrów dalej.</description>
  </mission>
  <mission>
    <id>4</id>
    <name>Obrót</name>
    <description>Oczywiście przemieszczanie robota tylko do przodu jest mało praktyczne. W tej misji pole docelowe znajduje się 10 metrów na prawo od robota. Najpierw musisz go obrócić o 90 stopni w prawo. Do tego celu użyj funkcji &lt;b&gt;Rotate(kąt)&lt;/b&gt;, gdzie kąt podajemy w stopniach. Podanie wartości ujemnej sprawi, że robot obróci się przeciwnie do wskazówek zegara. Po dokonaniu obrotu pozostaje wykorzystanie funkcji &lt;b&gt;Move(odległość)&lt;/b&gt; z poprzedniego zadania. Pamiętaj, że funkcje są wykonywane w kolejności od góry do dołu, a po każdej instrukji musi pojawić się średnik ';' jak w następującym kodzie :

&lt;b&gt;&lt;color=#800000ff&gt;using RobotsLibrary;

class Program : Robot
{
  void Main()
  {
    PierwszaFunckja();
    DrugaFunkcja();
  }
}&lt;/color&gt;&lt;/b&gt;</description>
  </mission>
  <mission>
    <id>5</id>
    <name>Labirynt</name>
    <description>Użyj funkcji &lt;b&gt;Move(odległość)&lt;/b&gt; oraz &lt;b&gt;Rotate(kąt)&lt;/b&gt;, aby przemieścić robota na koniec labiryntu. Aby znaleźć odpowiednią drogę, najpierw się trochę rozejrzyj osobiście.</description>
  </mission>
  <mission>
    <id>6</id>
    <name>Powolna jazda</name>
    <description>Twoim zadaniem jest przemieszczenie robota do strefy oddalonej o 30 metrów. Jednakże misja zakończy się niepowodzeniem, gdy robot będzie się poruszał szybciej niż 0.9 metra na sekundę. Aby spowolnić robota użyj funckji &lt;b&gt;SetMovementSpeed(prędkość)&lt;/b&gt;. Należy podać wartość mniejszą od 0.9. Tak. Zgadza się. Jako argumentów funkcji można również używać liczb zmiennoprzecinkowych. Należy jednak pamiętać, że tytułowy przecinek jest zastępowany przez kropkę "." oraz po liczbie należy dodać literę "f", aby zaznaczyć, ża mamy do czynienia z liczną zmiennoprzecinkową, na przykład "12.45f".</description>
  </mission>
  <mission>
    <id>7</id>
    <name>Zmienne</name>
    <description>Zmienne służą do przechowywania informacji określonego typu. Zmienna typu &lt;b&gt;int&lt;/b&gt; służy do przechowywania liczb całkowitych. Aby użyć zmiennej najpierw należy ją zadeklarować : 
&lt;b&gt;int&lt;/b&gt; a = 5;
Deklaracja zmiennej składa się z trzech części. Nazwy typu ('int'), nazwy zmiennej ('a') oraz początkowej wartości ('5'). Pamiętaj, że nazwa zmiennej nie może zawierać w sobie żadnych białych znaków oraz większości znaków specjalnych. W kolejnych misjach Twoim zadaniem będzie odpowiadanie na zadane pytania. Odpowiedzi udzielasz za pomocą funckji &lt;b&gt;Answer(odpowiedź)&lt;/b&gt;. Zacznijmy od czegoś prostego. Z ilu znaków składa się &lt;b&gt;nazwa zmiennej&lt;/b&gt; w następującym wyrażeniu :
&lt;b&gt;int&lt;/b&gt; duzaLiczba = 999999;</description>
  </mission>
  <mission>
    <id>8</id>
    <name>Operacje arytmetyczne</name>
    <description>Na zmiennych możemy wykonywać proste operacje arytmetyczne, takie jak dodawanie ("+"), odejmowanie ("-"), mnożenie ("*") i dzielenie ("/"). Wartoś zmiennej zmieniamy za pomocą operatora przypisania ("=")
int a = 5;
int b = 6
a = a + b;
W pierwszych dwóch wierszach deklarujemy zmienną "a" o wartości 5 oraz zmienną "b" o wartości 6. W trzecim wierszu zmiennej "a" przypisujemy nową wartość równą sumie zmiennych "a" i "b". Od tego momentu zmienna "a" będzie miała wartość 11. Za pomocą funkcji &lt;b&gt;Answer(odpowiedź)&lt;/b&gt; odpowiedz na pytanie : jaka będzie wartość zmiennej "c" po wykonaniu wszystkich czterech linijek następującego kodu?
int a = 3;
int b = 4;
b = b - a;
int c = b + 5;</description>
  </mission>
  <mission>
    <id>9</id>
    <name>Mnożenie</name>
    <description>Za pomocą funkcji &lt;b&gt;Answer(odpowiedź)&lt;/b&gt; odpowiedz na pytanie : jaka będzie wartość zmiennej "c" po wykonaniu wszystkich pięciu linijek następującego kodu?
int a = 3;
int b = 4;
a = a * a;
b = b * b;
c = b - a;
c = c * c;</description>
  </mission>
  <mission>
    <id>10</id>
    <name>Skomplikowane obliczenia</name>
    <description>Jak na razie Twoje obliczenia były bezbłędne. Jednak należy pamiętać, że to robot powinien zajmować się obliczeniami. Napisz więc program, który obliczy liczbę wyciętych drzew. Potrzebne dane zostały już umieszczone w kodzie. Odpowiedz na pytanie, używając funkcji &lt;b&gt;Answer(odpowiedź)&lt;/b&gt;.</description>
  </mission>
  <mission>
    <id>11</id>
    <name>Dzielenie i zmienne typu &lt;b&gt;float&lt;/b&gt;</name>
    <description>Jak już zostało powiedziane, zmienne typu &lt;b&gt;int&lt;/b&gt; przechowują liczby całkowite. Co jeśli chcemy zapisać ułamek? Z pomocą przychodzi nam typ &lt;b&gt;float&lt;/b&gt;. Po wykonaniu następującego kodu :

&lt;b&gt;&lt;color=#800000ff&gt;int a = 10;
int b = 3;
int c = a / b;&lt;/color&gt;&lt;b&gt;

zmienna "c" będzie równa 3, gdyż typ &lt;b&gt;int&lt;/b&gt; przechowuje tylko liczby całkowite. Wartość dzielenia została zaokrąglona w dół. Teraz spójrzmy na ten przykład:

&lt;b&gt;&lt;color=#800000ff&gt;float a = 10;
float b = 3;
float c = a / b;&lt;/color&gt;&lt;b&gt;

Dięki zastosowaniu typu &lt;b&gt;float&lt;/b&gt; zmienna "c" ma teraz wartość 3.333333 (po zaokrągleniu do szejściu miejsc po przecinku). Należy również mieć na uwadze, że przypisywanie liczby całkowitej do zmiennoprzecinkowej jest możliwe, lecz odwrota sytuacja spowoduje wystąpienie błędu :

&lt;b&gt;&lt;color=#800000ff&gt;int a = 10;
float b = a; // jest to dozwolone

float c = 10.5f;
int d = c; // wystąpi błąd, ponieważ nie da się zapisać liczby '10.5' w postaci liczby całkowitej&lt;/color&gt;&lt;b&gt;
    
Za pomocą zmiennych &lt;b&gt;float&lt;/b&gt; i operatorów arytmetycznych oblicz średnią z ocen pewnego ucznia. Potrzebne dane zostały już umieszczone w kodzie. Odpowiedz na pytanie, używając funkcji &lt;b&gt;Answer(odpowiedź)&lt;/b&gt;.</description>
  </mission>
  <mission>
    <id>12</id>
    <name>Jazda po okręgu</name>
    <description>Teraz zaczyna robić się naprawdę trudno. Do wykonania tej misji będą Tobie potrzebne trzy nowe funkcje : &lt;b&gt;SetRotationSpeed(float szybkość_obrotu)&lt;/b&gt;, &lt;b&gt;StartMove(czas)&lt;/b&gt; oraz &lt;b&gt;StartRotate(czas)&lt;/b&gt;. Pierwsza służy do ustawienia szybkości obrotu. Dwie kolejne funkcje różnią się od swoich odpowiedników bez prefiksu "Start" w dwóch kwestiach. Po pierwsze nie podajemy odległości do przebycia ani kątu do obrotu. Zamiast tego ustalamy jak długo ma trwać poruszanie się lub obrót. Drugą sprawą jest to, że po rozpoczęciu ruchu, robot nie czeka na zakończenie czynności lecz przechodzi do kolejnych funkcji. Przykładowo :
    
&lt;b&gt;&lt;color=#800000ff&gt;void Main()
{
  Move(10);
  Light();
}
&lt;/color&gt;&lt;/b&gt;

Ten kod sprawi, że robot przebędzie 10 metrów, a następnie włączy światła. Gdyby zamiast funkcji &lt;b&gt;Move&lt;/b&gt; użyć &lt;b&gt;StartMove&lt;/b&gt; robot jednocześnie zacznie się przemieszczać oraz zapali światła. Przydatną rzeczą jest połączenie funkcji &lt;b&gt;StartMove&lt;/b&gt; oraz &lt;b&gt;StartRotate&lt;/b&gt;, które sprawi, że robot będzie jednocześnie się poruszał i skręcał. Będzie się on poruszał po łuku. Wielkość tego łuku można określić za pomocą funkcji &lt;b&gt;SetRotationSpeed&lt;/b&gt;. Im większa szybkość obrotu, tym mniejszy będzie okrąg, po którym będzie się poruszał robot.

Twoim zadaniem jest przetransportowanie robota na drugi koniec trasy w kształcie okręgu o promieniu 10 metrów. Należy obliczyć ze wzoru na obwód koła długość trasu, czas trwania podróży oraz jaka powinna powinna być prędkość obrotu (WSKAZÓWKA : robot powinien wykonać obrót 180 stopni wciągu trwania całego ruchu). Prędkość robota odczytasz za pomocą funkcji &lt;b&gt;GetMovementSpeed()&lt;/b&gt;. Funkcja ta w odróżnieniu od poznanych dotychczas zwraca ona wartość typu &lt;b&gt;float&lt;/b&gt;, na przykład :

&lt;b&gt;&lt;color=#800000ff&gt;void Main()
{
  float predkosc = GetMovementSpeed();
  
  // zmienna 'predkosc' zawiera teraz wartość równą obecnie ustawionej prędkości robota
}
&lt;/color&gt;&lt;/b&gt;</description>
    
Należy pamiętać, że użycie zmiennej np. typu &lt;b&gt;int&lt;/b&gt; zamiast &lt;b&gt;float&lt;/b&gt; spowoduje wystąpienie błędu, gdyż nie można zamisać liczby zmiennoprzecinkowej za pomocą liczby całkowitej.
  </mission>
  <mission>
    <id>13</id>
    <name>Do przodu, czekaj, do przodu</name>
    <description>Aby dotrzeć do docelowego pola, należy otworzyć przejście. Można tego dokonać za pomocą umieszczonego przed nim przycisku, który aktywuje się, gdy robot stoi na nim przez 4 sekundy. Do wykonania zadania będzie potrzeba funkcja &lt;b&gt;Wait(czas)&lt;/b&gt;, która nakazuje robotowi czekać przez określoną ilość sekund. Przycisk znajduje się 9 metrów od początkowej pozycji robota, a pole docelowe 11 metrów dalej.</description>
  </mission>
  <mission>
    <id>14</id>
    <name>Pomiar odległości</name>
    <description>W kolejnych misjach będzie potrzebna funckja umożliwiająca pomiar odległości. Jest nią &lt;b&gt;Raycast()&lt;/b&gt;. Sprawia ona, że robot wysyła przed siebie promień i mierzy dystans do najbliższej przeszkody. Przykład użycia :

&lt;b&gt;&lt;color=#800000ff&gt;void Main()
{
  float odleglosc = Raycast();

  // zmienna 'odleglosc' zawiera teraz wartość równą odległości do najbliższej przeszkody z przodu robota
}
&lt;/color&gt;&lt;/b&gt;

Zadaniem w tej misji będzie pomiar odległości robota do ściany znajdującej się przed nim. Wynik należy podać za pomocą funkcji &lt;b&gt;Answer(odpowiedź)&lt;/b&gt;.
  </description>
  </mission>
  <mission>
    <id>15</id>
    <name>Warunki</name>
    <description>Do zrozumienia nowego zagadnienia niezbędny będzie nowy typ zmiennej &lt;b&gt;bool&lt;/b&gt;. Może ona przechowywać tylko dwie wartości : true (prawda) lub false (fałsz). Oto przykład deklaracji zmiennej typu &lt;b&gt;bool&lt;/b&gt; :
    
&lt;b&gt;&lt;color=#800000ff&gt;void Main()
{
  bool a = false;
  bool b = true;
}
&lt;/color&gt;&lt;/b&gt;

Gdy chcemy, aby robot wykonał daną czynność tylko wtedy, gdy określony warunek został spełniony, musimy użyć słowa kluczowego &lt;b&gt;if&lt;/b&gt;. Na przykład :

&lt;b&gt;&lt;color=#800000ff&gt;void Main()
{
  if(warunek)
  {
    WykonajPierwsząCzynność();
    WykonajDrrugąCzynność();
  }
}
&lt;/color&gt;&lt;/b&gt;

W miejsce "warunek" możemy wstawić nasz warunek. Istnieją sześć podstawowych warunków :
&lt;b&gt;&lt;color=#800000ff&gt;a > b    - jeżeli 'a' jest większe od 'b'
a &lt; b    - jeżeli 'a' jest mniejsze od 'b'
a >= b    - jeżeli 'a' jest większe lub równe 'b'
a &lt;= b    - jeżeli 'a' jest mniejsze lub równe 'b'
a == b    - jeżeli 'a' jest równe 'b'
a != b    - jeżeli 'a' jest różne od 'b'&lt;/color&gt;&lt;/b&gt;

Oto przykład :

&lt;b&gt;&lt;color=#800000ff&gt;void Main()
{
  int a = 7
  
  if(a > 3)
  {
    // warunek się wykona, gdyż 7 jest większe od 3
  }
  
  int b = 12;
  
  if(a >= b)
  {
    // warunek się nie wykona, gdyż 7 nie jest większe lub równe 12
  }
  
  bool c = false;
  
  if(c == true)
  {
    // warunek się nie wykona, zmienna 'c' nie ma wartości 'true'
  }
}
&lt;/color&gt;&lt;/b&gt;

Jaką wartość będzie miała zmienna 'd' po wykonaniu się całego kodu? :

&lt;b&gt;&lt;color=#800000ff&gt;void Main()
{
  int a = 5;
  int b = 12
  
  if(a == b)
  {
    a = 4;
  }
  
  if(a &lt; b)
  {
    b = 3;
  }
  
  bool c = false;
  
  if(c != false)
  {
    a = 50;
  }
  
  if(a > b)
  {
    b = 100;
  }
  
  int d = a + b;
}
&lt;/color&gt;&lt;/b&gt;

Udziel odpowiedzi za pomocą funkcji &lt;b&gt;Answer(odpowiedź)&lt;/b&gt;.</description>
  </mission>
  <mission>
    <id>16</id>
    <name>Pętle</name>
    <description>Do tej pory kod wykonywał się w sposób liniowy od góry do dołu. Jednakże to nie zawsze wystarcza. Czasami musimy wykonać daną czynność wiele razy. Z pomocą przychodzi pętla &lt;b&gt;while&lt;/b&gt;. Oto przykład jej zastosowania :
      
&lt;b&gt;&lt;color=#800000ff&gt;void Main()
{
  while(przyswojonaWiedza &lt; 100)
  {
    CzytajPodręcznik();
    RóbĆwiczenia();
  }
  
  Odpocznij();
}
&lt;/color&gt;&lt;/b&gt;

W nawiasach po słowie &lt;b&gt;while&lt;/b&gt; wstawiamy warunek. Instrukcje między klamrami będą wykonywać się, dopóki warunek jest prawdziwy. Gdy zmienna 'przyswojonaWiedza' będzie większa lub równa od 100, pętla zostanie przerwana i zostanie wykonana funkcja Odpocznij().

W tym zadaniu oprócz dostarczenia robota do miejsca docelowego, nie może on również dotknąć czerwonego promienia. Jeden jest przed, drugi za robotem. Człowiek może ich dotykać bez żadnych przeszkód. Gdy naciśniemy przycisk, promienie z losowym opóźnieniem od 4 do 10 sekund zaczną poruszać się do przodu ze stałą prędkością, równą prędkości robota.

Cały problem leży w właśnie w tym opóźnieniu. Robot po skompilowaniu kodu musi sam określić moment, kiedy należy ruszyć. Najprostrzym sposobem, aby to osiągnąć jest pomiar odległości do przedniego promienia. Gdy wystarczająco się oddali, robot powinien ruszyć. Pomiaru odległości można wykonać za pomocą funkcji &lt;b&gt;Raycast()&lt;/b&gt;. Aby wykonać misję należy tak długo powtarzać funkcję &lt;b&gt;Wait(czas)&lt;/b&gt;, aż odległość do przedniego promienia wystarczająco się zwiększy. Jako argument funkcji &lt;b&gt;Wait(czas)&lt;/b&gt; należy podać bardzo małą wartość, przykładowo 0.2f, aby robot odpowienio szybko reagował. Miejsce docelowe jest oddalone o 22 metry.</description>
  </mission>
  <mission>
    <id>17</id>
    <name>Nieskończona pętla</name>
    <description>
      To zadanie jest bardzo podobne do poprzedniego z tą różnicą, że po wciśnięciu przycisku promienie zaczną się natychmiast przemieszczać, zatrzymując się po drodze losową ilość razy. Robot powinien wykryć zartzymanie się promieni oraz się zatrzymać. Podobnie musi być wstanie określić, kiedy należy kontynuować przemieszczanie się. Może być przydatne pętla, która nigdy się nie zatrzyma oraz nowe słowo kluczowe &lt;b&gt;else&lt;/b&gt; :

&lt;b&gt;&lt;color=#800000ff&gt;void Main()
{
  while(true)
  {
    if(warunek)
    {
      // wykona się, jeżeli warunek jest prawdziwy
    }
    else
    {
      // wykona się, jeżeli warunek jest fałszywy
    }    
  }
}
&lt;/color&gt;&lt;/b&gt;

Jak można się domyśleć, instukcje umieszczone w klamrach po słowie kluczowym &lt;b&gt;else&lt;/b&gt; wykonają się, gdy warunek nie został spełniony. &lt;b&gt;else&lt;/b&gt; występuje wyłącznie w parze ze słowem &lt;b&gt;if&lt;/b&gt;. Oczywistym jest, że wykonają się polecenia albo po słowie kluczowym &lt;b&gt;if&lt;/b&gt;, albo po słowie kluczowym &lt;b&gt;else&lt;/b&gt;, lecz nigdy nie jednocześnie.

Napisz program, który przemieści robota do pola docelowego, pamiętając jednocześnie, że robot nie może dotknąć żadnego z promieni. WSKAZÓWA : Użyj funkcji &lt;b&gt;StartMove(czas)&lt;/b&gt; zamiast &lt;b&gt;Move(odległość)&lt;/b&gt;, gdyż druga funkcja nie zakończy działania, dopóki nie przebędzie wymaganej odległości, pierwszą zaś funkcję można zakończyć funkcją &lt;b&gt;Wait(czas)&lt;/b&gt;.</description>
  </mission>
  <mission>
    <id>18</id>
    <name>Iteracje</name>
    <description>Kolejnym zadaniem będzie pokananie labiryntu o następującym kształcie : 
&lt;color=#237514ff&gt;
_ _ _ _ _ _ _ _ _
|   _ _ _ _ _ _     |
|   |   _ _ _ _   |   |
|   |   |    _ _|   |   |
|   |   |_ _ _ _  |   |
|   | _ _ _ _ _ _ _|
|X|
&lt;/color&gt;
Znak 'X' oznacza poczatkową pozycję labiryntu. Aby dotrzeć na sam koniec należy przejechać 25 metrów, skęcić w prawo, znów przejechać 25 metrów, znów skręcić w prawo, 20 metrów, w prawo, 20 metrów, w prawo, 15 metrów, w prawo, 15 metrów, w prawo itd. Jak widać jest to dość spora liczba kroków, które jednak są bardzo powtarzalne. Każdy fragment składa się z 4 czynności : x metrów, w prawo, x metrów, w prawo. Następny fragment będzie już wyglądał następująco : x-5 metrów, w prawo, x-5 metrów, w prawo. Gdy mamy do czynienia z iteracją, czyli zmianą stopniową zmianą zmiennej (w tym przypadku drogi do przebycia), należy skorzystać z pętli &lt;b&gt;for&lt;/b&gt; :
&lt;b&gt;&lt;color=#800000ff&gt;
void Main()
{
  for(int i = 0; i &lt; 10; i = i + 1)
  {
    Move(i);
  }
}
&lt;/color&gt;&lt;/b&gt;
Przeanalizujmy działanie tej pętli. Zawiera ona w nawiasach okrągłych trzy elementy odzielone średnikami. Pierwszy element wykonuje się tylko raz i definiuje początkową wartość zmiennej. Drugi to warunek. Tak długo jak jest prawdziwy, tak długo będzie się wykonywać. Trzeci element to instrukcja, która wykonuje się po każdym wykonaniu pętli. Teraz rozbijmy działanie pętli na części pierwsze :
1. Tworzymy zmienną 'i' o wartośći początkowej '0'
2. Sprawdzamy, czy i &lt; 10 (0 &lt; 10), co jest oczywiście prawdą
3. Wykonujemy funkcję Move(i), gdzie i = 0, czyli nic się nie wydarzy
4. Wykonujemy instrukcję i = i + 1. Teraz zmienna 'i' ma wartość '1'
5. Sprawdzamy, czy i &lt; 10 (1 &lt; 10), co również jest prawdą
6. Wykonujemy funkcję Move(i), gdzie i = 1, czyli robot przemieszcza się o 1 metr
.
.
.
N. Wykonujemy funkcję Move(i), gdzie i = 9, czyli robot przemieszcza się o 9 metrów
N+1. Wykonujemy instrukcję i = i + 1. Teraz zmienna 'i' ma wartość '10'
N+2. Sprawdzamy, czy i &lt; 10 (10 &lt; 10), co jest nieprawdą, więc pętla zostaje przerwana
      
Ostatecznie pętla została wykonana 10 razy, a robot przemieścił się o 0+1+2+3+4+5+6+7+8+9 metrów. Wykorzystując pętlę &lt;b&gt;for&lt;/b&gt; przemieść robota do miejsca docelowego.</description>
  </mission>
  <mission>
    <id>19</id>
    <name>Przycisk</name>
    <description>Jak na razie po wciśnięciu przycisku 'Kompiluj' nie mieliśmy żadnego wpływu na działanie robota. Jednakże jest pewien sposób, aby go kontrolować w trakcie wykonywania kodu. Do tego celu można na przykład użyć specjalnych przycisków. Aby sprawdzić czy dany przycisk został naciśnięty, należy użyć funkcji &lt;b&gt;IsButtonPressed(nazwaPrzycisku)&lt;/b&gt;. Nazwę przycisku należy podać między dwoma cudzysłowami :
    
&lt;b&gt;&lt;color=#800000ff&gt;bool czyPrzyciskJestNaciśnięty = IsButtonPressed("Mój przycisk");

if(czyPrzyciskJestNaciśnięty == true)
{
  // dalsz kod
}
      
// lub krócej

if(IsButtonPressed("Mój przycisk") == true)
{
  // dalszy kod
}&lt;/color&gt;&lt;/b&gt;
      
W tej misji należy przemieścić się do pola docelowego za pomocą specjalnej platformy, która porusza się nieprzerwanie między dwiema większymi platformami. Robot nie jest wstanie wykryć, kedy należy wejść na tą platformę i kiedy ją opuścić. Będzie konieczne sterowanie robotem za pomocą przycisku. Przykładowo gdy jest wciśnięty, robot powinien ruszyć do przodu, a kiedy jest zwolniony, robot powinien się zatrzymać. Nazwa przycisku to "zielony" (wielkość liter ma znaczenie).</description>
  </mission>
  <mission>
    <id>20</id>
    <name>Obiekty</name>
    <description>Zadaniem w tej misji będzie dotarcie do miejsca docelowego. Jednakże jest ono ukryte. Jego pozycję możesz odczytać za pomocą funkcji &lt;b&gt;GetPosition(nazwaObiektu)&lt;/b&gt;. Pewnie już się domyślasz, że pozycji nie da się przedstawić w postaci ani liczby całkowitej, ani liczby zmiennoprzecinkowej, gdyż pozycja składa się z dwóch liczb (pozycja 'x' i pozycja 'y'). Do operowania na złożonych pojęciach należy wykorzystać &lt;b&gt;typy złożone&lt;/b&gt;, w tym przypadku typ &lt;b&gt;Position&lt;/b&gt; :

&lt;b&gt;&lt;color=#800000ff&gt;Position pozycja = GetPosition("jakaś nazwa");&lt;/color&gt;&lt;/b&gt;
      
Teraz zmienna 'pozycja' zawiera informacje na temat obiektu o nazwie "jakaś nazwa". Aby odwołać się do poszczególnych składowych pozycji, należy użyć kropki '.', a następnie podać nazwę &lt;b&gt;zmiennej składowej&lt;/b&gt; :
      
&lt;b&gt;&lt;color=#800000ff&gt;foat x = pozycja.x;
float y = pozycja.y;&lt;/color&gt;&lt;/b&gt;
s     
Robot znajduje się na pozycji (0, 0) i jest zwrócony zgodnie z kierunkiem osi 'y'. Dla przykładu, jeżeli szukana pozycja wynosi (-2, 1), to widok z góry wyglądałby następująco :
&lt;color=#237514ff&gt;
= = = = =
= ? = = =
= = = X =
= = = = =

X - robot, ? - ukryte miejsce
&lt;/color&gt;
Dotrzyj do miejsca docelowego o nazwie "ukryty cel".</description>
  </mission>
  <mission>
    <id>21</id>
    <name>Funkcje składowe</name>
    <description>W tym zadaniu miejsce docelowe również ma nazwę "ukryty cel" lecz robot nie znajduje się już w pozycji (0, 0). To znaczy, że wartość zwrócona przez GetPosition("ukryty cel") nie mówi już nam nic o pozycji ukrytego miejsca docelowego. Musimy dodatkowo poznać pozycję robota za pomocą tej samej funkcji. Nazwa robota to "szukający robot". Gdy poznamy dwie szukane pozycje, będziemy w stanie obliczyć względne odległości. Jednakże jest to dobre miejsce, aby wykorzystać dobrodziejstwo typów złożonych. Mogą one posiadać nie tylko wiele zmiennych, ale również własne &lt;b&gt;funkcje składowe&lt;/b&gt;. Jedną z nich jest &lt;b&gt;GetRelationPosition (pozycjaBezwzględna)&lt;/b&gt;. Aby skorzystać z funckji składowej należy zastosować znak kropki '.' :
      
&lt;b&gt;&lt;color=#800000ff&gt;Position pozycja1 = GetPosition("pozycja1");
Position pozycja2 = GetPosition("pozycja2");
      
Position pozycjaWzględna = pozycja1.GetRelativePosition(pozycja2);&lt;/color&gt;&lt;/b&gt;
     
Pozycja względna będzie zawierałą pozycję względną drugiego obiektu względem pierwszego (nie na odwrót!). Przykładowo jeżeli pozycja1 wynosi (10, 5), a pozycja2 równa się (2, 4) to pozycjaWzględna będzie wynosiła (8, 1). Ta wartość oznacza, że aby dostać się z punktu pierwszego do punktu drugiego należy pokonać 8 metrów w osi 'x' i 1 metr w osi 'y'.
      
Oblicz pozycję względną i dotrzyj do punktu docelowego. Robot nadal jest zwrócony zgodnie z kierunkiem osi 'y'.</description>
  </mission>
  <mission>
    <id>22</id>
    <name>Własne funkcje</name>
    <description>Niekiedy zdarza się, że musimy wykonać podobną czynność wiele razy, jednak nie jesteśmy wstanie uprościć kodu za pomocą pętli. W tej misji twoim zadaniem będzie przekształcenie 5 liczb według poniższego schematu :
&lt;b&gt;&lt;color=#800000ff&gt;
x = x + 1;
x = x * x;
x = x - 1;
x = (x - 1) * (x + 1);
x = 10 * x;
&lt;/color&gt;&lt;/b&gt;
a następnie dodanie do siebie tych przekształconych liczb.
      
Jak widać jest to dość złożone przekształcenie. W matematyce nosiłoby ono nazwę &lt;b&gt;funkcji&lt;/b&gt;, a całość można by było zapsisać w postaci &lt;b&gt;f(x)&lt;/b&gt;. Nie inaczej jest tutaj.
Dobrym pomysłem byłoby stworzenie własnej funkcji, która wykonywałaby powyższe przekształcenie. Oto przykład funkcji dodającej dwie liczby :
&lt;b&gt;&lt;color=#800000ff&gt;
using RobotsLibrary;

class Program : Robot
{
  void Main()
  {
    int x = 10;
    int y = Dodaj(x, 5);
  }
  
  int Dodaj(int a, int b)
  {
    return a + b;
  }
}
&lt;/color&gt;&lt;/b&gt;
Utworzyliśmy funkcję, która pobiera dwa argumenty typu &lt;b&gt;int&lt;/b&gt; i zwraca wartość typu &lt;b&gt;int&lt;/b&gt;. Słowo kluczowe &lt;b&gt;return&lt;/b&gt; powołuje przerwanie funkcji i zwrócenie wartości. Po zakończeniu działania kodu zmienna 'y' będzie miała wartość '15'. Warto zauważyć, że funkcjię Dodaj(a, b) umieściliśmy poza funkcją 'Main()'. 

Jak nie trudno się domyślić, funkcja Main(), która wykonuje się automatycznie po skompilowaniu kodu, nie przyjmuje żadnych argumentów, a po braku słowa kluczowego &lt;b&gt;return&lt;/b&gt; możemy wnioskować, że nie zwraca żadnej wartości. Rzeczywiście, słowo kluczowe &lt;b&gt;void&lt;/b&gt; oznacza brak zwracanej wartości.

Posiadając już teraz umiejętność tworzenia własnych funkcji, służących skracaniu kodu, oblicz sumę f(-1)+f(0)+f(1)+f(5)+f(6), gdzie f(x) jest wyżej wymienionym przekształceniem.
    </description>
  </mission>
  <mission>
    <id>23</id>
    <name>Podróż do wielu punktów</name>
    <description>W tej misji robot musi dotrzeć do 5 różnych ukrytych miejsc. Wykonanie pięciu bardzo podobnych czynności jest świetną okazją do użycia funkcji. Powinna ona przyjmować jako argument nazwę celu, a następnie przemieścić się do niego. Nie ma potrzeby, aby ta funkcja coś zwracała, dlatego typ zwracanej wartości powinien być ustawiony na &lt;b&gt;void&lt;b&gt; (brak zwracanej wartość). Dodając do tego informację, że typ tekstowy ma nazwę &lt;b&gt;string&lt;b&gt;, jesteśmy w stanie stworzyć naszą funkcję :
&lt;b&gt;&lt;color=#800000ff&gt;
using RobotsLibrary;

class Program : Robot
{
  void Main()
  {
    // pięciokrotne wykorzystanie funkcji 'JedzDo(nazwaCelu)'
  }

  void JedzDo(string nazwaCelu)
  {
    // kod, który przemieści robota do celu o podanej nazwie
  }
}
&lt;/color&gt;&lt;/b&gt;

Nazwy tych miejsc to "zmienna", "funkcja", "obiekt", "iteracja" i "warunek".</description>
  </mission>
</missions>